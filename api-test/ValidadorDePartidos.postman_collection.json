{
	"info": {
		"_postman_id": "4476d7f6-429b-478b-be04-54356744ece3",
		"name": "ValidadorDePartidos",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27531873"
	},
	"item": [
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
							"pm.collectionVariables.set(\"userName\", randomName);\r",
							"\r",
							"let randomEmail = pm.variables.replaceIn(\"{{$randomEmail}}\");\r",
							"pm.collectionVariables.set(\"userEmail\", randomEmail);\r",
							"\r",
							"let randomPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
							"pm.collectionVariables.set(\"userPassword\", randomPassword);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 4 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Message is a String\", function () {\r",
							"    var jsonData = pm.response.json();  \r",
							"    pm.expect(jsonData.message).to.be.a('string');\r",
							"    pm.expect(jsonData.message).to.have.length.above(0); \r",
							"});\r",
							"\r",
							"pm.test(\"Message matches expected value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"User registered successfully!\"); \r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{userName}}\",\r\n  \"email\": \"{{userEmail}}\",\r\n  \"password\": \"{{userPassword}}\",\r\n  \"role\": [\"organizer\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}auth/signup"
			},
			"response": []
		},
		{
			"name": "Authenticated User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 4 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Access token is present and valid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.accessToken).to.be.a('string'); // Verifica que es un string\r",
							"    pm.expect(jsonData.accessToken).to.have.length.above(10); // Verifica que no está vacío\r",
							"});\r",
							"\r",
							"pm.test(\"Roles contain ROLE_ORGANIZER\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.roles).to.include(\"ROLE_ORGANIZER\"); // Verifica que el rol esperado está en la lista\r",
							"});\r",
							"\r",
							"pm.test(\"Username matches the request variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(pm.variables.get(\"userName\")); // Compara el username del JSON con la variable\r",
							"});\r",
							"\r",
							"pm.test(\"Email matches the request variable\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"userEmail\")); // Compara el email del JSON con la variable\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{userName}}\",\r\n  \"password\": \"{{userPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}auth/signin"
			},
			"response": []
		},
		{
			"name": "Get All Tournaments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
							"});\r",
							"\r",
							"// Verifica que la respuesta es un arreglo\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array'); \r",
							"});\r",
							"\r",
							"// Verifica propiedades del array\r",
							"pm.test(\"Each tournament has required properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (tournament) {\r",
							"        pm.expect(tournament).to.have.property(\"id\");\r",
							"        pm.expect(tournament).to.have.property(\"name\");\r",
							"        pm.expect(tournament).to.have.property(\"number\");\r",
							"        pm.expect(tournament).to.have.property(\"round\");\r",
							"        pm.expect(tournament).to.have.property(\"start\");\r",
							"        pm.expect(tournament).to.have.property(\"finish\");\r",
							"        pm.expect(tournament).to.have.property(\"status\");\r",
							"    });\r",
							"});\r",
							"\r",
							" // Verifica que el estado es un booleano\r",
							"// Verifica que el estado es `true`\r",
							"pm.test(\"All tournaments have valid status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (tournament) {\r",
							"        pm.expect(tournament.status).to.be.a(\"boolean\");\r",
							"        pm.expect(tournament.status).to.eql(true); \r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{userPassword}}",
						"username": "{{userName}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}tournaments"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userName",
			"value": ""
		},
		{
			"key": "userEmail",
			"value": ""
		},
		{
			"key": "userPassword",
			"value": ""
		}
	]
}